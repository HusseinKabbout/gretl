plugins {
    id 'java-library'
    id 'eclipse'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.10.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8 

apply from: '../dependencies.gradle'
apply from: 'integration-test.gradle'

configurations.all {
    resolutionStrategy { 
        force 'ch.interlis:ili2pg:3.11.3-SNAPSHOT'
    }
}

dependencies {  
    api gradleApi()
  
    api ilivalidatorDependency
    api (ili2pgDependency) {
        exclude group: 'ch.ehi', module: 'ehisqlgen'
    }
    api ioxWkfDependency
    api ioxIliDependency
    api ehiSqlgenDependency

    api apacheCommonsIoDependency

    runtimeOnly postgresqlDependency
    runtimeOnly sqliteJdbcDependency
    runtimeOnly derbyDependency
    //runtimeOnly oracleDependency
	    
    testImplementation junitDependency
    testImplementation testContainersDependency
    testImplementation testContainersPostgresDependency
    
    /**
     * Provides, at compile-time, the classes produced by the _main_ and _test_ SourceSets, 
     * allowing the integration tests to access the production code in _main_ and allowing 
     * them to reuse any unit test helper methods in _test_.
     */
    integrationTestImplementation sourceSets.main.output
    integrationTestImplementation sourceSets.test.output
    
    /**
     * Provides, at compile-time, the dependencies that both _main_ and _test_ require in order
     * to successfully compile.
     */
    integrationTestImplementation configurations.implementation
    integrationTestImplementation configurations.testImplementation
    
    /**
     * Provides, at run-time, the dependencies that both _main_ and _test_ require to run.
     */
    integrationTestImplementation configurations.runtime
    integrationTestImplementation configurations.testRuntime
    
}

gradlePlugin {
    plugins {
        gretlPlugin {
            id = 'ch.so.agi.gretl'
            implementationClass = 'ch.so.agi.gretl.gradle.GretlPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/sogis/gretl' 
    vcsUrl = 'https://github.com/sogis/gretl.git' 
    tags = ['etl', 'gis', 'sdi', 'geo', 'geoinformation', 'interlis', 'geopackage', 'shapefile', 'csv', 'database', 'postgresql', 'sqlite', 'ili2pg', 'ilivalidator'] 
    
    plugins { 
        gretlPlugin {  
            displayName = 'GRETL' 
            description = 'The Gradle gretl plugin extends gradle for use as a sql-centric (geo)data etl. gretl = gradle etl.' 
        }
    }
}

// 'gradle publishToMavenLocal' publishes
// oracle jdbc to local maven repo.
/*
publishing {
	publications {
		maven(MavenPublication) {
			artifactId "ojdbc7"
			version "12.1.0.1"
			groupId "com.oracle"
			artifact file('./lib/ojdbc7-12.1.0.1.jar')
		}
	}
}
*/

test {
    useJUnit{
        // Exclude all Tests with dependency to a db server (pg, oracle, ..)
        excludeCategories 'ch.so.agi.gretl.testutil.DbTest'
    }
}

task dbTest(type: Test, dependsOn: [compileJava, compileTestJava]) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs all unit tests with dependency to a db server (pg, oracle, ...).'
    useJUnit {
        includeCategories 'ch.so.agi.gretl.testutil.DbTest'
    }
}

/*
task jardist(type: Copy){
	delete fileTree('jardist')
	destinationDir = file('jardist')
	from jar
	from configurations.runtimeClasspath
	// version = '1.0.6'

}
*/

// Transfer the required configuration variables to the test code.
// (The test code has no access to the -D or -P variables as it is executed in a separate jvm-process)
tasks.withType(Test) {
    def GRETLTEST_DBURI = 'gretltest_dburi_pg'
    systemProperty(GRETLTEST_DBURI, findProperty(GRETLTEST_DBURI))
    
    systemProperty('GRETL_PROJECT_ABS_PATH', project(':gretl').getProjectDir().getAbsolutePath())
    systemProperty('ROOT_PROJECT_ABS_PATH', project.getRootProject().getProjectDir().getAbsolutePath())
}

/*
publishing{
    publications{
        mavenJava(MavenPublication){
            from components.java
        }
    }
    repositories{
        maven{
            name 'Public'
            url System.getProperty('repos_url')
            credentials {
                username System.getProperty('repos_usr')
                password System.getProperty('repos_pwd')
            }
        }
    }
}
*/
